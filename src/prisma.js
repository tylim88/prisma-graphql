import { Prisma } from 'prisma-binding'
import { prependListener } from 'cluster'
import { promises } from 'fs'
import { fragmentReplacements } from './resolvers/index'

const prisma = new Prisma({
  // copy from prisma.yml
  typeDefs: 'src/generated/prisma/prisma.graphql', //need to use typedef auto generated by prisma, use path relative to root
  endpoint: process.env.PRISMA_ENDPOINT, // end point of prisma server, heroku will inject the env variable, also can use env-cmd to inject
  secret: process.env.PRISMA_SECRET,
  fragmentReplacements, //bind fragment created from resolver to prisma
})

export { prisma as default }

// prisma.query.users(null, '{ id name posts { id title } }').then(data => {
//   console.log(JSON.stringify(data, undefined, 2)) // null or undefined also can
// })

// prisma.query.comments(null, '{ id text author { id name } }').then(data => {
//   console.log(JSON.stringify(data, null, 2))
// })

// prisma.mutation
//   .createPost(
//     {
//       data: {
//         title: 'old post',
//         body: 'I am not here',
//         published: false,
//         author: {
//           connect: {
//             id: 'cjogqjjlh001r0748ei14hc4c',
//           },
//         },
//       },
//     },
//     '{id title body published author{id name email}}'
//   )
//   .then(data => {
//     console.log(JSON.stringify(data, undefined, 2))
//     return prisma.query.users(null, '{id name posts {id title}}')
//   })
//   .then(data => {
//     console.log(JSON.stringify(data, undefined, 2))
//   })

// prisma.mutation
//   .updatePost(
//     { data: { published: true }, where: { id: 'cjohbwqc8005x0748x5w9gnxk' } },
//     '{ id body }'
//   )
//   .then(data => {
//     console.log(JSON.stringify(data, undefined, 2))
//     return prisma.query.posts(null, '{ id published }')
//   })
//   .then(data => {
//     console.log(JSON.stringify(data, undefined, 2))
//   })

// prisma.exists
//   .Comment({
//     // can use any comment property to verify
//     id: 'cjoguwujv00400748k5nsrqe6',
//     author: {
//       id: 'cjogqjjlh001r0748ei14hc4c',
//     },
//   })
//   .then(exists => console.log(exists))

// const createPostForUser = async (authorId, data) => {
//   const userExists = await prisma.exists.User({ id: authorId })

//   if (!userExists) {
//     throw new Error('User not found')
//   }

//   const post = await prisma.mutation.createPost(
//     {
//       data: {
//         ...data,
//         author: {
//           connect: {
//             id: authorId,
//           },
//         },
//       },
//     },
//     '{ author {id name email posts {id title published}} }'
//   )
// const user = await prisma.query.user(
//   { where: { id: authorId } },
//   '{id name email posts {id title published}}'
// ) // redundant

//   return post.author
// }

// createPostForUser('cjogqjjlh001r0748ei14hc4c', {
//   title: 'Greate book to read',
//   body: 'the war of art',
//   published: true,
// })
//   .then(user => {
//     console.log(JSON.stringify(user, undefined, 2))
//   })
//   .catch(error => console.log(error.message)) // error.message print out only string,excluding the other error details

// const updatePostForUser = async (postId, data) => {
//   const postExists = await prisma.exists.Post({ id: postId })

//   if (!postExists) {
//     throw new Error('Post not found')
//   }
//   const post = await prisma.mutation.updatePost(
//     {
//       data: { ...data },
//       where: { id: postId },
//     },
//     '{ id body author  {id name email posts {id title body published} } }'
//   )

// const user = await prisma.query.user(
//   { where: { id: post.author.id } },
//   '{id name email posts {id title body published}}'
// ) // return

//   return post.author
// }
// updatePostForUser('cjohbwqc8005x0748x5w9gnxk', {
//   body: 'this is the olddddddddddddddddd post',
// })
//   .then(user => console.log(JSON.stringify(user, null, 2)))
//   .catch(error => console.log(error.message))
